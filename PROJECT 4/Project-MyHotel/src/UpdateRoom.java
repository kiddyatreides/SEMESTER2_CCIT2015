/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author KIDDY
 */

import java.awt.Color;
import java.sql.*;
import javax.swing.JOptionPane;

public class UpdateRoom extends javax.swing.JFrame {

    /**
     * Creates new form UpdateRoom
     */
    public UpdateRoom() {
        initComponents();
        getContentPane().setBackground(Color.BLACK);
        getDataForCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tf_IDRoom = new javax.swing.JTextField();
        tf_price = new javax.swing.JTextField();
        cb_IDClass = new javax.swing.JComboBox();
        btn_update = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_check = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Update Room");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(57, 58, 270, 55);

        jLabel2.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ID Room");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(80, 180, 52, 15);

        jLabel3.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ID Class");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(80, 220, 46, 14);

        jLabel4.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Price");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(80, 260, 29, 15);
        getContentPane().add(tf_IDRoom);
        tf_IDRoom.setBounds(150, 180, 100, 20);

        tf_price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_priceKeyTyped(evt);
            }
        });
        getContentPane().add(tf_price);
        tf_price.setBounds(150, 250, 180, 20);

        getContentPane().add(cb_IDClass);
        cb_IDClass.setBounds(150, 220, 180, 20);

        btn_update.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });
        getContentPane().add(btn_update);
        btn_update.setBounds(150, 290, 80, 23);

        btn_delete.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });
        getContentPane().add(btn_delete);
        btn_delete.setBounds(230, 290, 70, 23);

        btn_check.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        btn_check.setText("Check");
        btn_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_checkActionPerformed(evt);
            }
        });
        getContentPane().add(btn_check);
        btn_check.setBounds(260, 180, 70, 23);

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(10, 10, 90, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
     private void getDataForCombo(){
        try{
            
            Koneksi kon = new Koneksi();
            Connection con = kon.open();
            
            String sql = "Select id_class,name from tb_class";
            
            Statement state = con.createStatement();
            ResultSet rs = state.executeQuery(sql);
            
            while(rs.next()){
                cb_IDClass.addItem(rs.getString("id_class"));
                
            }
            cb_IDClass.setSelectedIndex(-1);
            
            con.close();
        }
        catch(Exception e ){
            System.err.println(e);
        }
    }
    
    private void btn_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_checkActionPerformed
        // TODO add your handling code here:
        
        //check from combobox
        try
        {
            Koneksi kon = new Koneksi();
            Connection con = kon.open();
            
            String sql = "select * from tb_room2 where id_room = ?";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, tf_IDRoom.getText());
            ResultSet rs = ps.executeQuery();
            
            if(rs.next())
            {
                
                tf_IDRoom.setText(rs.getString("id_room"));
                tf_price.setText(rs.getString("price"));
                cb_IDClass.setSelectedItem(rs.getString("id_class"));
                
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Data not found.");
                
            }
        }
            catch(Exception e)
            {
                    System.err.println(e);
            }
        
    }//GEN-LAST:event_btn_checkActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        // TODO add your handling code here:
        if(Validation() == 0){
            String idroom = tf_IDRoom.getText();
            String price = tf_price.getText();
            String idclass = cb_IDClass.getSelectedItem().toString();
            String status = "Available";

            try
            {
                Koneksi kon = new Koneksi();
                Connection con = kon.open();

                String sql = "update tb_room2 set id_class = ?, " +
                             "price = ? where id_room = ?";
                PreparedStatement ps = con.prepareStatement(sql);
                ps.setString(1, idclass);
                ps.setString(2, price);
                ps.setString(3, idroom);
                int rows = ps.executeUpdate();

                if(rows!=0)
                {
                    JOptionPane.showMessageDialog(this, "Data sucessfull updated.");

                    ClearForm();
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Check Error.");
                }
            }
            catch(Exception e)
            {
                System.err.println(e);
            }
        }
        
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        if(Validation() == 0){
            
        
          try 
            {
                int result = JOptionPane.showConfirmDialog(this, "Are you sure?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
                if(result==JOptionPane.YES_OPTION)
                {
                    Koneksi kon = new Koneksi();
                    Connection con = kon.open();

                    String sql = "delete from tb_room2 where id_room = ?";
                    PreparedStatement ps = con.prepareStatement(sql);
                    ps.setString(1, tf_IDRoom.getText());
                    int row = ps.executeUpdate();
                    if(row!=0)
                    {
                        ClearForm();
                        JOptionPane.showMessageDialog(this, "Successful delete data.");
                        
                    }
                }
                else
                {
                    ClearForm();

                }
            }
         catch(Exception e){
             System.err.println(e);
         }
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void tf_priceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_priceKeyTyped
        // TODO add your handling code here:
          char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9') || (c == evt.VK_BACK_SPACE) || (c == evt.VK_DELETE))) 
        {
            evt.consume();
        }
    }//GEN-LAST:event_tf_priceKeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        
        this.hide();
    }//GEN-LAST:event_jButton2ActionPerformed

    
     public void ClearForm(){
       tf_IDRoom.setText(null);
       tf_price.setText(null);
       cb_IDClass.setSelectedIndex(-1);
    }
    
     
    
        private int Validation(){
        int flag = 0;
        String error = "";
        
        
        if(tf_IDRoom.getText().equals("")){
            flag = 1;
            error += "ID Class cannot be blank.\n";
        }
        if(tf_price.getText().equals("")){
            flag = 1;
            error += "Amount of Price cannot be blank.\n";
        }
       
        if(cb_IDClass.getSelectedIndex()==-1)
        {
            flag = 1;
            error += "ID Class cannot be blank.\n";
        }
        
        
        if(flag == 0)
        {
            
        }
        else
        {
            JOptionPane.showMessageDialog(this, error);
        }
        return flag;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateRoom().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_check;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_update;
    private javax.swing.JComboBox cb_IDClass;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField tf_IDRoom;
    private javax.swing.JTextField tf_price;
    // End of variables declaration//GEN-END:variables
}
